#!/usr/bin/env node

import { Command } from 'commander';
import chalk from 'chalk';
import { initCommand } from '../src/commands/init.js';
import { checkCommand } from '../src/commands/check.js';
import { configCommand } from '../src/commands/config.js';
import { handleCommandError, validateEnvironment } from '../src/error-handler.js';

const program = new Command();

// Validate environment before starting
async function validateBeforeStart() {
  const issues = await validateEnvironment();

  if (issues.length > 0) {
    const errors = issues.filter((issue) => issue.type === 'error');
    const warnings = issues.filter((issue) => issue.type === 'warning');

    if (errors.length > 0) {
      console.error(chalk.red('✗ Environment validation failed:'));
      errors.forEach((error) => {
        console.error(chalk.red(`  - ${error.message}`));
        console.error(chalk.gray(`    Fix: ${error.fix}`));
      });
      process.exit(1);
    }

    if (warnings.length > 0) {
      console.warn(chalk.yellow('⚠ Environment warnings:'));
      warnings.forEach((warning) => {
        console.warn(chalk.yellow(`  - ${warning.message}`));
        console.warn(chalk.gray(`    Suggestion: ${warning.fix}`));
      });
    }
  }
}

program
  .name('deset')
  .description(
    'OAS Developer Environment Setup Tool - Automate environment setup and project health checks'
  )
  .version('1.0.0')
  .addHelpText(
    'after',
    `
Common Usage:
  $ deset init                   Set up a new project with best practices
  $ deset check                  Run health checks on your project  
  $ deset i --dry-run           Preview initialization changes
  $ deset c --no-interactive    Run checks in CI/CD pipelines

For more detailed examples, use:
  $ deset init --help
  $ deset check --help
  
Environment:
  Node.js version: ${process.version}
  Platform: ${process.platform}
  Package: @oas/deset v1.0.0
  `
  );

// Init command
program
  .command('init')
  .alias('i')
  .description('Initialize developer environment with configuration files')
  .option('--dry-run', 'Show planned actions without executing them')
  .option('--format <type>', 'Output format (json)', 'text')
  .option('--no-eslint', 'Disable ESLint setup')
  .option('--no-prettier', 'Disable Prettier setup')
  .option('--no-husky', 'Disable Husky setup')
  .option('--no-lint-staged', 'Disable lint-staged setup')
  .option('--no-dependabot', 'Disable Dependabot setup')
  .option('--no-audit', 'Disable audit checks')
  .option('--no-stale-check', 'Disable stale package checks')
  .addHelpText(
    'after',
    `
Examples:
  $ deset init                    Initialize with all features enabled
  $ deset i --dry-run            Preview what would be created
  $ deset init --no-husky        Initialize without Git hooks
  $ deset init --format json     Output results in JSON format
  $ deset init --no-prettier --no-eslint  Initialize without code formatting
  `
  )
  .action(async (options) => {
    try {
      await validateBeforeStart();
      await initCommand(options);
    } catch (error) {
      handleCommandError(error, 'init');
      process.exit(1);
    }
  });

// Check command
program
  .command('check')
  .alias('c')
  .description('Run various project health checks')
  .option('--changed-only', 'Only check changed files (via git diff)')
  .option('--format <type>', 'Output format (json)', 'text')
  .option('--no-interactive', 'Disable interactive prompts')
  .option('--no-audit', 'Disable audit checks')
  .option('--no-stale-check', 'Disable stale package checks')
  .addHelpText(
    'after',
    `
Examples:
  $ deset check                   Run all health checks interactively
  $ deset c --no-interactive     Run checks without prompts (CI-friendly)
  $ deset check --format json    Output results in JSON format
  $ deset check --changed-only   Only check files changed in git
  $ deset check --no-audit       Skip security audit checks
  $ deset check --no-stale-check Skip stale package analysis
  `
  )
  .action(async (options) => {
    try {
      await validateBeforeStart();
      await checkCommand(options);
    } catch (error) {
      handleCommandError(error, 'check');
      process.exit(1);
    }
  });

// Config command
program
  .command('config')
  .description('Interactive configuration wizard')
  .option('--reset', 'Reset configuration to defaults')
  .addHelpText(
    'after',
    `
Examples:
  $ deset config                 Run interactive configuration wizard
  $ deset config --reset         Reset to default configuration
  `
  )
  .action(async (options) => {
    try {
      await validateBeforeStart();
      await configCommand(options);
    } catch (error) {
      handleCommandError(error, 'config');
      process.exit(1);
    }
  });

// Global error handlers
process.on('uncaughtException', (error) => {
  console.error(chalk.red('✗ Uncaught Exception:'), error.message);
  if (process.env.NODE_ENV === 'development') {
    console.error(error.stack);
  }
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error(chalk.red('✗ Unhandled Promise Rejection:'), reason);
  if (process.env.NODE_ENV === 'development') {
    console.error('Promise:', promise);
  }
  process.exit(1);
});

// Parse command line arguments
try {
  await program.parseAsync(process.argv);
} catch (error) {
  // Don't show error for help or version commands
  if (error.code === 'commander.help' || error.code === 'commander.version') {
    process.exit(0);
  }

  handleCommandError(error, 'CLI parsing');
  process.exit(1);
}
